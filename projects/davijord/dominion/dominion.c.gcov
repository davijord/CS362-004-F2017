        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:76
        -:    0:Programs:16
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1796280 returned 100% blocks executed 83%
  1796280:    8:int compare(const void* a, const void* b) {
  1796280:    8-block  0
  1796280:    9:  if (*(int*)a > *(int*)b)
  1796280:    9-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    $$$$$:   10-block  0
  1796280:   11:  if (*(int*)a < *(int*)b)
  1796280:   11-block  0
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
   459340:   12:    return -1;
   459340:   12-block  0
  1336940:   13:  return 0;
  1336940:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 46030 returned 100% blocks executed 88%
    46030:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    46030:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    46030:   44:  SelectStream(1);
    46030:   44-block  0
call    0 returned 100%
    46030:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    46030:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    46030:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    46030:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   506330:   57:  for (i = 0; i < 10; i++)
    46030:   57-block  0
   460300:   57-block  1
   506330:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  5063300:   59:      for (j = 0; j < 10; j++)
   460300:   59-block  0
  4603000:   59-block  1
  5063300:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  4603000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
  4603000:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
  4142700:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    46030:   73:  if (numPlayers == 2)
    46030:   73-block  0
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   74:    {
    23255:   75:      state->supplyCount[curse] = 10;
    23255:   75-block  0
        -:   76:    }
    22775:   77:  else if (numPlayers == 3)
    22775:   77-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
    22775:   79:      state->supplyCount[curse] = 20;
    22775:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    46030:   87:  if (numPlayers == 2)
    46030:   87-block  0
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   88:    {
    23255:   89:      state->supplyCount[estate] = 8;
    23255:   90:      state->supplyCount[duchy] = 8;
    23255:   91:      state->supplyCount[province] = 8;
    23255:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
    22775:   95:      state->supplyCount[estate] = 12;
    22775:   96:      state->supplyCount[duchy] = 12;
    22775:   97:      state->supplyCount[province] = 12;
    22775:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    46030:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    46030:  102:  state->supplyCount[silver] = 40;
    46030:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   966630:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
    46030:  106-block  0
   920600:  106-block  1
   966630:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  7594950:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   920600:  108-block  0
  6674350:  108-block  1
  7594950:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  7134650:  110:	  if (kingdomCards[j] == i)
  7134650:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   460300:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
   460300:  113-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   460300:  113-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   460300:  122:		  state->supplyCount[i] = 10;
   460300:  122-block  0
        -:  123:		}
   460300:  124:	      break;
   460300:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  6674350:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   160865:  138:  for (i = 0; i < numPlayers; i++)
    46030:  138-block  0
   114835:  138-block  1
   160865:  138-block  2
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:    {
   114835:  140:      state->deckCount[i] = 0;
   459340:  141:      for (j = 0; j < 3; j++)
   114835:  141-block  0
   344505:  141-block  1
   459340:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   344505:  143:	  state->deck[i][j] = estate;
   344505:  144:	  state->deckCount[i]++;
        -:  145:	}
   918680:  146:      for (j = 3; j < 10; j++)
   114835:  146-block  0
   803845:  146-block  1
   918680:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   803845:  148:	  state->deck[i][j] = copper;
   803845:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   160865:  154:  for (i = 0; i < numPlayers; i++)
    46030:  154-block  0
   114835:  154-block  1
   160865:  154-block  2
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:    {
   114835:  156:      if ( shuffle(i, state) < 0 )
   114835:  156-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   160865:  163:  for (i = 0; i < numPlayers; i++)
    46030:  163-block  0
   114835:  163-block  1
   160865:  163-block  2
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   114835:  166:      state->handCount[i] = 0;
   114835:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1288840:  176:  for (i = 0; i <= treasure_map; i++)
    46030:  176-block  0
  1242810:  176-block  1
  1288840:  176-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
  1242810:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    46030:  182:  state->outpostPlayed = 0;
    46030:  183:  state->phase = 0;
    46030:  184:  state->numActions = 1;
    46030:  185:  state->numBuys = 1;
    46030:  186:  state->playedCardCount = 0;
    46030:  187:  state->whoseTurn = 0;
    46030:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   276180:  192:  for (it = 0; it < 5; it++){
    46030:  192-block  0
   276180:  192-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   230150:  193:    drawCard(state->whoseTurn, state);
   230150:  193-block  0
call    0 returned 100%
        -:  194:  }
        -:  195:
    46030:  196:  updateCoins(state->whoseTurn, state, 0);
    46030:  196-block  0
call    0 returned 100%
        -:  197:
    46030:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 34732623 returned 100% blocks executed 100%
 34732623:  201:int shuffle(int player, struct gameState *state) {
 34732623:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
 34732623:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
 34732623:  209:  if (state->deckCount[player] < 1)
 34732623:  209-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
 34609788:  210:    return -1;
 34609788:  210-block  0
   122835:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
   122835:  211-block  0
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1327259:  214:  while (state->deckCount[player] > 0) {
  1327259:  214-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  1204424:  215:    card = floor(Random() * state->deckCount[player]);
  1204424:  215-block  0
call    0 returned 100%
  1204424:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1204424:  217:    newDeckPos++;
  4068817:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  2864393:  218-block  0
  4068817:  218-block  1
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
  2864393:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1204424:  221:    state->deckCount[player]--;
  1204424:  221-block  0
        -:  222:  }
  1327259:  223:  for (i = 0; i < newDeckPos; i++) {
   122835:  223-block  0
  1204424:  223-block  1
  1327259:  223-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  1204424:  224:    state->deck[player][i] = newDeck[i];
  1204424:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
 34732623:  228:  return 0;
   122835:  228-block  0
 34732623:  228-block  1
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 19274 returned 100% blocks executed 100%
    19274:  320:int supplyCount(int card, struct gameState *state) {
    19274:  320-block  0
    19274:  321:  return state->supplyCount[card];
    19274:  321-block  0
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
    $$$$$:  328-block  1
    $$$$$:  328-block  2
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
    $$$$$:  333-block  1
    $$$$$:  333-block  2
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
    $$$$$:  338-block  1
    $$$$$:  338-block  2
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
        -:  344:}
        -:  345:
function whoseTurn called 46030 returned 100% blocks executed 100%
    46030:  346:int whoseTurn(struct gameState *state) {
    46030:  346-block  0
    46030:  347:  return state->whoseTurn;
    46030:  347-block  0
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
    $$$$$:  356-block  1
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
    $$$$$:  380-block  1
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
    $$$$$:  402-block  1
    $$$$$:  402-block  2
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
    $$$$$:  422-block  1
    $$$$$:  422-block  2
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
    $$$$$:  433-block  1
    $$$$$:  433-block  2
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
    $$$$$:  444-block  1
    $$$$$:  444-block  2
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
    $$$$$:  464-block  1
    $$$$$:  464-block  2
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
    $$$$$:  479-block  1
    $$$$$:  479-block  2
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
    $$$$$:  500-block  1
    $$$$$:  500-block  2
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
    $$$$$:  510-block  1
    $$$$$:  510-block  2
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
        -:  523:}
        -:  524:
function drawCard called 17693292 returned 100% blocks executed 100%
 17693292:  525:int drawCard(int player, struct gameState *state)
 17693292:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
 17693292:  528:  if (state->deckCount[player] <= 0){//Deck is empty
 17693292:  528-block  0
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
 17364968:  533:    for (i = 0; i < state->discardCount[player];i++){
 17308894:  533-block  0
    56074:  533-block  1
 17364968:  533-block  2
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
    56074:  534:      state->deck[player][i] = state->discard[player][i];
    56074:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
 17308894:  538:    state->deckCount[player] = state->discardCount[player];
 17308894:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
 17308894:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
 17308894:  542-block  0
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
 17308894:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
 17308894:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
 17308894:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
 17308894:  559:    if (deckCounter == 0)
 17308894:  559-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
 17300894:  560:      return -1;
 17300894:  560-block  0
        -:  561:
     8000:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     8000:  563:    state->deckCount[player]--;
     8000:  564:    state->handCount[player]++;//Increment hand count
     8000:  564-block  0
        -:  565:  }
        -:  566:
        -:  567:  else{
   384398:  568:    int count = state->handCount[player];//Get current hand count for player
   384398:  568-block  0
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   384398:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   384398:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   384398:  576:    state->deckCount[player]--;
   384398:  577:    state->handCount[player]++;//Increment hand count
   384398:  577-block  0
        -:  578:  }
        -:  579:
   392398:  580:  return 0;
   392398:  580-block  0
        -:  581:}
        -:  582:
function getCost called 56018 returned 100% blocks executed 97%
    56018:  583:int getCost(int cardNumber)
    56018:  583-block  0
        -:  584:{
    56018:  585:  switch( cardNumber ) 
    56018:  585-block  0
branch  0 taken 34%
branch  1 taken 3%
branch  2 taken 2%
branch  3 taken 2%
branch  4 taken 5%
branch  5 taken 2%
branch  6 taken 2%
branch  7 taken 2%
branch  8 taken 2%
branch  9 taken 2%
branch 10 taken 2%
branch 11 taken 2%
branch 12 taken 16%
branch 13 taken 2%
branch 14 taken 2%
branch 15 taken 2%
branch 16 taken 2%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 2%
branch 23 taken 2%
branch 24 taken 2%
branch 25 taken 2%
branch 26 taken 2%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    19164:  588:      return 0;
    19164:  588-block  0
        -:  589:    case estate:
     1528:  590:      return 2;
     1528:  590-block  0
        -:  591:    case duchy:
     1062:  592:      return 5;
     1062:  592-block  0
        -:  593:    case province:
     1036:  594:      return 8;
     1036:  594-block  0
        -:  595:    case copper:
     2733:  596:      return 0;
     2733:  596-block  0
        -:  597:    case silver:
     1107:  598:      return 3;
     1107:  598-block  0
        -:  599:    case gold:
      998:  600:      return 6;
      998:  600-block  0
        -:  601:    case adventurer:
     1025:  602:      return 4;
     1025:  602-block  0
        -:  603:    case council_room:
      972:  604:      return 5;
      972:  604-block  0
        -:  605:    case feast:
     1071:  606:      return 4;
     1071:  606-block  0
        -:  607:    case gardens:
     1065:  608:      return 4;
     1065:  608-block  0
        -:  609:    case mine:
      984:  610:      return 5;
      984:  610-block  0
        -:  611:    case remodel:
     8706:  612:      return 4;
     8706:  612-block  0
        -:  613:    case smithy:
     1042:  614:      return 4;
     1042:  614-block  0
        -:  615:    case village:
      956:  616:      return 3;
      956:  616-block  0
        -:  617:    case baron:
     1077:  618:      return 4;
     1077:  618-block  0
        -:  619:    case great_hall:
     1185:  620:      return 3;
     1185:  620-block  0
        -:  621:    case minion:
     1048:  622:      return 5;
     1048:  622-block  0
        -:  623:    case steward:
     1036:  624:      return 3;
     1036:  624-block  0
        -:  625:    case tribute:
     1057:  626:      return 5;
     1057:  626-block  0
        -:  627:    case ambassador:
      941:  628:      return 3;
      941:  628-block  0
        -:  629:    case cutpurse:
     1046:  630:      return 4;
     1046:  630-block  0
        -:  631:    case embargo: 
      931:  632:      return 2;
      931:  632-block  0
        -:  633:    case outpost:
     1079:  634:      return 5;
     1079:  634-block  0
        -:  635:    case salvager:
     1106:  636:      return 4;
     1106:  636-block  0
        -:  637:    case sea_hag:
     1134:  638:      return 4;
     1134:  638-block  0
        -:  639:    case treasure_map:
      929:  640:      return 4;
      929:  640-block  0
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
        -:  644:}
        -:  645:
function adventurer_card called 8012 returned 100% blocks executed 100%
     8012:  646:int adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn){
     8012:  646-block  0
     8012:  647:	int z = 0;
        -:  648:	int temphand[MAX_HAND];
        -:  649:	
 17421117:  650:	while(drawntreasure<1){
     8012:  650-block  0
 17421117:  650-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 17413105:  651:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
 17413105:  651-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
 17308894:  652:	  shuffle(currentPlayer, state);
 17308894:  652-block  0
call    0 returned 100%
        -:  653:	}
 17413105:  654:	drawCard(currentPlayer, state);
 17413105:  654-block  0
call    0 returned 100%
 17413105:  655:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
 17413105:  656:	if (cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
 17407465:  656-block  0
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     8012:  657:	  drawntreasure++;
     8012:  657-block  0
        -:  658:	else{
 17405093:  659:	  temphand[z]=cardDrawn;
 17405093:  660:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
 17405093:  661:	  z++;
 17405093:  661-block  0
        -:  662:	}
        -:  663:      }
   601230:  664:      while(z-1>=0){
     8012:  664-block  0
   601230:  664-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   593218:  665:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   593218:  666:	z=z-1;
   593218:  666-block  0
        -:  667:      }
     8012:  668:	return 0;
     8012:  668-block  0
        -:  669:}
        -:  670:
function smithy_card called 10007 returned 100% blocks executed 100%
    10007:  671:int smithy_card(int currentPlayer, struct gameState *state, int handPos){
    10007:  671-block  0
        -:  672:	//+3 Cards
        -:  673:      int i;
    60042:  674:      for (i = 0; i < 5; i++)
    10007:  674-block  0
    60042:  674-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  675:	{
    50035:  676:	  drawCard(currentPlayer, state);
    50035:  676-block  0
call    0 returned 100%
        -:  677:	}
        -:  678:			
        -:  679:      //discard card from hand
    10007:  680:      discardCard(handPos, currentPlayer, state, 0);
    10007:  680-block  0
call    0 returned 100%
    10007:  681:      return 0;
        -:  682:}
        -:  683:
function remodel_card called 28009 returned 100% blocks executed 100%
    28009:  684:int remodel_card(int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
    28009:  684-block  0
        -:  685:      int i;
    28009:  686:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  687:
    28009:  688:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    28009:  688-block  0
call    0 returned 100%
call    1 returned 100%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
        -:  689:	{
     8735:  690:	  return -1;
     8735:  690-block  0
        -:  691:	}
        -:  692:
    19274:  693:      gainCard(choice2, state, 0, currentPlayer);
    19274:  693-block  0
call    0 returned 100%
        -:  694:
        -:  695:      //discard card from hand
    19274:  696:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  697:
        -:  698:      //discard trashed card
    51972:  699:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    32698:  699-block  0
    51972:  699-block  1
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  700:	{
    49005:  701:	  if (state->hand[currentPlayer][i] == j)
    49005:  701-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  702:	    {
    16307:  703:	      discardCard(i, currentPlayer, state, 0);			
    16307:  703-block  0
call    0 returned 100%
    16307:  704:	      break;
        -:  705:	    }
        -:  706:	}
    19274:  707:      return 0;
    19274:  707-block  0
        -:  708:}
        -:  709:
function cardEffect called 46030 returned 100% blocks executed 6%
    46030:  710:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    46030:  710-block  0
        -:  711:{
        -:  712:  int i;
        -:  713:  int j;
        -:  714:  int k;
        -:  715:  int x;
        -:  716:  int index;
    46030:  717:  int currentPlayer = whoseTurn(state);
    46030:  717-block  0
call    0 returned 100%
    46030:  718:  int nextPlayer = currentPlayer + 1;
        -:  719:
    46030:  720:  int tributeRevealedCards[2] = {-1, -1};
        -:  721:  int temphand[MAX_HAND];// moved above the if statement
    46030:  722:  int drawntreasure=0;
        -:  723:  int cardDrawn;
    46030:  724:  int z = 0;// this is the counter for the temp hand
    46030:  725:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
    19351:  726:    nextPlayer = 0;
    19351:  726-block  0
        -:  727:  }
        -:  728:  
        -:  729:	
        -:  730:  //uses switch to select card and perform actions
    46030:  731:  switch( card ) 
    46030:  731-block  0
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 61%
branch  6 taken 22%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  732:    {
        -:  733:    case adventurer:
     8012:  734:      	z = adventurer_card(drawntreasure, state, currentPlayer, cardDrawn);		
     8012:  734-block  0
call    0 returned 100%
     8012:  735:	return z;
        -:  736:    case council_room:
        -:  737:      //+4 Cards
    #####:  738:      for (i = 0; i < 4; i++)
    $$$$$:  738-block  0
    $$$$$:  738-block  1
branch  0 never executed
branch  1 never executed
        -:  739:	{
    #####:  740:	  drawCard(currentPlayer, state);
    $$$$$:  740-block  0
call    0 never executed
        -:  741:	}
        -:  742:			
        -:  743:      //+1 Buy
    #####:  744:      state->numBuys++;
        -:  745:			
        -:  746:      //Each other player draws a card
    #####:  747:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  747-block  0
    $$$$$:  747-block  1
    $$$$$:  747-block  2
branch  0 never executed
branch  1 never executed
        -:  748:	{
    #####:  749:	  if ( i != currentPlayer )
    $$$$$:  749-block  0
branch  0 never executed
branch  1 never executed
        -:  750:	    {
    #####:  751:	      drawCard(i, state);
    $$$$$:  751-block  0
call    0 never executed
        -:  752:	    }
        -:  753:	}
        -:  754:			
        -:  755:      //put played card in played card pile
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  756-block  0
call    0 never executed
        -:  757:			
    #####:  758:      return 0;
        -:  759:			
        -:  760:    case feast:
        -:  761:      //gain card with cost up to 5
        -:  762:      //Backup hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  763-block  0
    $$$$$:  763-block  1
    $$$$$:  763-block  2
branch  0 never executed
branch  1 never executed
    #####:  764:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  765:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  766:      }
        -:  767:      //Backup hand
        -:  768:
        -:  769:      //Update Coins for Buy
    #####:  770:      updateCoins(currentPlayer, state, 5);
    $$$$$:  770-block  0
call    0 never executed
    #####:  771:      x = 1;//Condition to loop on
    #####:  772:      while( x == 1) {//Buy one card
    $$$$$:  772-block  0
branch  0 never executed
branch  1 never executed
    #####:  773:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	  if (DEBUG)
        -:  775:	    printf("None of that card left, sorry!\n");
        -:  776:
        -:  777:	  if (DEBUG){
        -:  778:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  779:	  }
        -:  780:	}
    #####:  781:	else if (state->coins < getCost(choice1)){
    $$$$$:  781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  782:	  printf("That card is too expensive!\n");
    $$$$$:  782-block  0
call    0 never executed
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  786:	  }
        -:  787:	}
        -:  788:	else{
        -:  789:
        -:  790:	  if (DEBUG){
        -:  791:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  792:	  }
        -:  793:
    #####:  794:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  794-block  0
call    0 never executed
    #####:  795:	  x = 0;//No more buying cards
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
        -:  801:	}
        -:  802:      }     
        -:  803:
        -:  804:      //Reset Hand
    #####:  805:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  805-block  0
    $$$$$:  805-block  1
    $$$$$:  805-block  2
branch  0 never executed
branch  1 never executed
    #####:  806:	state->hand[currentPlayer][i] = temphand[i];
    #####:  807:	temphand[i] = -1;
        -:  808:      }
        -:  809:      //Reset Hand
        -:  810:      			
    #####:  811:      return 0;
    $$$$$:  811-block  0
        -:  812:			
        -:  813:    case gardens:
    #####:  814:      return -1;
    $$$$$:  814-block  0
        -:  815:			
        -:  816:    case mine:
    #####:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
    #####:  819:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  819-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  819-block  1
branch  2 never executed
branch  3 never executed
        -:  820:	{
    #####:  821:	  return -1;
    $$$$$:  821-block  0
        -:  822:	}
        -:  823:		
    #####:  824:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  824-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  824-block  1
branch  2 never executed
branch  3 never executed
        -:  825:	{
    #####:  826:	  return -1;
    $$$$$:  826-block  0
        -:  827:	}
        -:  828:
    #####:  829:      if ( (getCost(state->hand[currentPlayer][choice1]) + 8) > getCost(choice2) )
    $$$$$:  829-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  830:	{
    #####:  831:	  return -1;
    $$$$$:  831-block  0
        -:  832:	}
        -:  833:
    #####:  834:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  834-block  0
call    0 never executed
        -:  835:
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  838:
        -:  839:      //discard trashed card
    #####:  840:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  840-block  0
    $$$$$:  840-block  1
branch  0 never executed
branch  1 never executed
        -:  841:	{
    #####:  842:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  842-block  0
branch  0 never executed
branch  1 never executed
        -:  843:	    {
    #####:  844:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  844-block  0
call    0 never executed
    #####:  845:	      break;
        -:  846:	    }
        -:  847:	}
        -:  848:			
    #####:  849:      return 0;
    $$$$$:  849-block  0
        -:  850:			
        -:  851:    case remodel:
    28009:  852:      z = remodel_card(j, state, currentPlayer, choice1, choice2, handPos);
    28009:  852-block  0
call    0 returned 100%
    28009:  853:      return z;
        -:  854:		
        -:  855:    case smithy:
    10007:  856:      z = smithy_card(currentPlayer, state, handPos);
    10007:  856-block  0
call    0 returned 100%
    10007:  857:      return z;
        -:  858:		
        -:  859:    case village:
        -:  860:      //+1 Card
        2:  861:      drawCard(currentPlayer, state);
        2:  861-block  0
call    0 returned 100%
        -:  862:			
        -:  863:      //+2 Actions
        2:  864:      state->numActions = state->numActions + 2;
        -:  865:			
        -:  866:      //discard played card from hand
        2:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  868:      return 0;
        -:  869:		
        -:  870:    case baron:
    #####:  871:      state->numBuys++;//Increase buys by 1!
    #####:  872:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  872-block  0
branch  0 never executed
branch  1 never executed
    #####:  873:	int p = 0;//Iterator for hand!
    #####:  874:	int card_not_discarded = 1;//Flag for discard set!
    #####:  875:	while(card_not_discarded){
    $$$$$:  875-block  0
    $$$$$:  875-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  875-block  2
    #####:  876:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  876-block  0
branch  0 never executed
branch  1 never executed
    #####:  877:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:	    state->discardCount[currentPlayer]++;
    #####:  880:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  880-block  0
    $$$$$:  880-block  1
    $$$$$:  880-block  2
branch  0 never executed
branch  1 never executed
    #####:  881:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:	    }
    #####:  883:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:	    state->handCount[currentPlayer]--;
    #####:  885:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  885-block  0
        -:  886:	  }
    #####:  887:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  887-block  0
branch  0 never executed
branch  1 never executed
        -:  888:	    if(DEBUG) {
        -:  889:	      printf("No estate cards in your hand, invalid choice\n");
        -:  890:	      printf("Must gain an estate if there are any\n");
        -:  891:	    }
    #####:  892:	    if (supplyCount(estate, state) > 0){
    $$$$$:  892-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  893-block  0
call    0 never executed
    #####:  894:	      state->supplyCount[estate]--;//Decrement estates
    #####:  895:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:		isGameOver(state);
    $$$$$:  896-block  0
call    0 never executed
        -:  897:	      }
        -:  898:	    }
    #####:  899:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  899-block  0
        -:  900:	  }
        -:  901:			    
        -:  902:	  else{
    #####:  903:	    p++;//Next card
    $$$$$:  903-block  0
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:			    
        -:  908:      else{
    #####:  909:	if (supplyCount(estate, state) > 0){
    $$$$$:  909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  910-block  0
call    0 never executed
    #####:  911:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  913:	    isGameOver(state);
    $$$$$:  913-block  0
call    0 never executed
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:	    
        -:  918:      
    #####:  919:      return 0;
    $$$$$:  919-block  0
        -:  920:		
        -:  921:    case great_hall:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
    $$$$$:  923-block  0
call    0 never executed
        -:  924:			
        -:  925:      //+1 Actions
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case minion:
        -:  933:      //+1 action
    #####:  934:      state->numActions++;
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  937-block  0
call    0 never executed
        -:  938:			
    #####:  939:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  940:	{
    #####:  941:	  state->coins = state->coins + 2;
    $$$$$:  941-block  0
        -:  942:	}
        -:  943:			
    #####:  944:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  944-block  0
branch  0 never executed
branch  1 never executed
        -:  945:	{
        -:  946:	  //discard hand
    #####:  947:	  while(numHandCards(state) > 0)
    $$$$$:  947-block  0
    $$$$$:  947-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  948:	    {
    #####:  949:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  949-block  0
call    0 never executed
        -:  950:	    }
        -:  951:				
        -:  952:	  //draw 4
    #####:  953:	  for (i = 0; i < 4; i++)
    $$$$$:  953-block  0
    $$$$$:  953-block  1
branch  0 never executed
branch  1 never executed
        -:  954:	    {
    #####:  955:	      drawCard(currentPlayer, state);
    $$$$$:  955-block  0
call    0 never executed
        -:  956:	    }
        -:  957:				
        -:  958:	  //other players discard hand and redraw if hand size > 4
    #####:  959:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  959-block  0
    $$$$$:  959-block  1
    $$$$$:  959-block  2
branch  0 never executed
branch  1 never executed
        -:  960:	    {
    #####:  961:	      if (i != currentPlayer)
    $$$$$:  961-block  0
branch  0 never executed
branch  1 never executed
        -:  962:		{
    #####:  963:		  if ( state->handCount[i] > 4 )
    $$$$$:  963-block  0
branch  0 never executed
branch  1 never executed
        -:  964:		    {
        -:  965:		      //discard hand
    #####:  966:		      while( state->handCount[i] > 0 )
    $$$$$:  966-block  0
    $$$$$:  966-block  1
branch  0 never executed
branch  1 never executed
        -:  967:			{
    #####:  968:			  discardCard(handPos, i, state, 0);
    $$$$$:  968-block  0
call    0 never executed
        -:  969:			}
        -:  970:							
        -:  971:		      //draw 4
    #####:  972:		      for (j = 0; j < 4; j++)
    $$$$$:  972-block  0
    $$$$$:  972-block  1
branch  0 never executed
branch  1 never executed
        -:  973:			{
    #####:  974:			  drawCard(i, state);
    $$$$$:  974-block  0
call    0 never executed
        -:  975:			}
        -:  976:		    }
        -:  977:		}
        -:  978:	    }
        -:  979:				
        -:  980:	}
    #####:  981:      return 0;
    $$$$$:  981-block  0
        -:  982:		
        -:  983:    case steward:
    #####:  984:      if (choice1 == 1)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:	{
        -:  986:	  //+2 cards
    #####:  987:	  drawCard(currentPlayer, state);
    $$$$$:  987-block  0
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
    #####:  990:      else if (choice1 == 2)
    $$$$$:  990-block  0
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //+2 coins
    #####:  993:	  state->coins = state->coins + 2;
    $$$$$:  993-block  0
        -:  994:	}
        -:  995:      else
        -:  996:	{
        -:  997:	  //trash 2 cards in hand
    #####:  998:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  998-block  0
call    0 never executed
    #####:  999:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1000:	}
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1003-block  0
call    0 never executed
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case tribute:
    #####: 1007:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1007-block  0
branch  0 never executed
branch  1 never executed
    #####: 1008:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
    #####: 1009:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	  state->deckCount[nextPlayer]--;
    $$$$$: 1010-block  0
        -: 1011:	}
    #####: 1012:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1012-block  0
branch  0 never executed
branch  1 never executed
    #####: 1013:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:	  state->discardCount[nextPlayer]--;
    $$$$$: 1014-block  0
        -: 1015:	}
        -: 1016:	else{
        -: 1017:	  //No Card to Reveal
        -: 1018:	  if (DEBUG){
        -: 1019:	    printf("No cards to reveal\n");
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      else{
    #####: 1025:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    #####: 1026:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1026-block  0
    $$$$$: 1026-block  1
    $$$$$: 1026-block  2
branch  0 never executed
branch  1 never executed
    #####: 1027:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:	    state->deckCount[nextPlayer]++;
    #####: 1029:	    state->discard[nextPlayer][i] = -1;
    #####: 1030:	    state->discardCount[nextPlayer]--;
        -: 1031:	  }
        -: 1032:			    
    #####: 1033:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1033-block  0
call    0 never executed
        -: 1034:	} 
    #####: 1035:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
    #####: 1038:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    $$$$$: 1040-block  0
        -: 1041:      }    
        -: 1042:		       
    #####: 1043:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1043-block  0
branch  0 never executed
branch  1 never executed
    #####: 1044:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:	state->playedCardCount++;
    #####: 1046:	tributeRevealedCards[1] = -1;
    $$$$$: 1046-block  0
        -: 1047:      }
        -: 1048:
    #####: 1049:      for (i = 0; i <= 2; i ++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1050-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1050-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1050-block  2
branch  4 never executed
branch  5 never executed
    #####: 1051:	  state->coins += 2;
    #####: 1052:	  drawCard(currentPlayer, state);
    $$$$$: 1052-block  0
call    0 never executed
    #####: 1053:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1054:	  state->numActions = state->numActions + 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1057-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1057-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1057-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1057-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1057-block  4
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
    $$$$$: 1058-block  0
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1060:	  state->coins += 2;
    #####: 1061:	  state->numActions = state->numActions + 2;
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
    #####: 1065:	  state->coins += 2;
    #####: 1066:	  drawCard(currentPlayer, state);
    $$$$$: 1066-block  0
call    0 never executed
    #####: 1067:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1068:	}
        -: 1069:      }
        -: 1070:	    
    #####: 1071:      return 0;
    $$$$$: 1071-block  0
        -: 1072:		
        -: 1073:    case ambassador:
    #####: 1074:      j = 0;		//used to check if player has enough cards to discard
        -: 1075:
    #####: 1076:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1076-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1076-block  1
branch  2 never executed
branch  3 never executed
        -: 1077:	{
    #####: 1078:	  return -1;				
    $$$$$: 1078-block  0
        -: 1079:	}
        -: 1080:
    #####: 1081:      if (choice1 == handPos)
    $$$$$: 1081-block  0
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  return -1;
    $$$$$: 1083-block  0
        -: 1084:	}
        -: 1085:
    #####: 1086:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1086-block  0
    $$$$$: 1086-block  1
    $$$$$: 1086-block  2
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1088-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1088-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1088-block  2
branch  4 never executed
branch  5 never executed
        -: 1089:	    {
    #####: 1090:	      j++;
    $$$$$: 1090-block  0
        -: 1091:	    }
        -: 1092:	}
    #####: 1093:      if (j < choice2)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
        -: 1094:	{
    #####: 1095:	  return -1;				
    $$$$$: 1095-block  0
        -: 1096:	}
        -: 1097:
        -: 1098:      if (DEBUG) 
        -: 1099:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1100:
        -: 1101:      //increase supply count for choosen card by amount being discarded
    #####: 1102:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1103:			
        -: 1104:      //each other player gains a copy of revealed card
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1105-block  0
    $$$$$: 1105-block  1
    $$$$$: 1105-block  2
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  if (i != currentPlayer)
    $$$$$: 1107-block  0
branch  0 never executed
branch  1 never executed
        -: 1108:	    {
    #####: 1109:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1109-block  0
call    0 never executed
        -: 1110:	    }
        -: 1111:	}
        -: 1112:
        -: 1113:      //discard played card from hand
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1114-block  0
call    0 never executed
        -: 1115:
        -: 1116:      //trash copies of cards returned to supply
    #####: 1117:      for (j = 0; j < choice2; j++)
    $$$$$: 1117-block  0
    $$$$$: 1117-block  1
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1119-block  0
    $$$$$: 1119-block  1
    $$$$$: 1119-block  2
branch  0 never executed
branch  1 never executed
        -: 1120:	    {
    #####: 1121:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
        -: 1122:		{
    #####: 1123:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1123-block  0
call    0 never executed
    #####: 1124:		  break;
        -: 1125:		}
        -: 1126:	    }
        -: 1127:	}			
        -: 1128:
    #####: 1129:      return 0;
    $$$$$: 1129-block  0
        -: 1130:		
        -: 1131:    case cutpurse:
        -: 1132:
    #####: 1133:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1133-block  0
call    0 never executed
    #####: 1134:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
branch  0 never executed
branch  1 never executed
        -: 1135:	{
    #####: 1136:	  if (i != currentPlayer)
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:	    {
    #####: 1138:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1138-block  0
    $$$$$: 1138-block  1
    $$$$$: 1138-block  2
branch  0 never executed
branch  1 never executed
        -: 1139:		{
    #####: 1140:		  if (state->hand[i][j] == copper)
    $$$$$: 1140-block  0
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      discardCard(j, i, state, 0);
    $$$$$: 1142-block  0
call    0 never executed
    #####: 1143:		      break;
        -: 1144:		    }
    #####: 1145:		  if (j == state->handCount[i])
    $$$$$: 1145-block  0
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1147-block  0
    $$$$$: 1147-block  1
    $$$$$: 1147-block  2
branch  0 never executed
branch  1 never executed
        -: 1148:			{
        -: 1149:			  if (DEBUG)
        -: 1150:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1151:			}	
    #####: 1152:		      break;
    $$$$$: 1152-block  0
        -: 1153:		    }		
        -: 1154:		}
        -: 1155:					
        -: 1156:	    }
        -: 1157:				
        -: 1158:	}				
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1161-block  0
call    0 never executed
        -: 1162:
    #####: 1163:      return 0;
        -: 1164:
        -: 1165:		
        -: 1166:    case embargo: 
        -: 1167:      //+2 Coins
    #####: 1168:      state->coins = state->coins + 2;
        -: 1169:			
        -: 1170:      //see if selected pile is in play
    #####: 1171:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1171-block  0
branch  0 never executed
branch  1 never executed
        -: 1172:	{
    #####: 1173:	  return -1;
    $$$$$: 1173-block  0
        -: 1174:	}
        -: 1175:			
        -: 1176:      //add embargo token to selected supply pile
    #####: 1177:      state->embargoTokens[choice1]++;
        -: 1178:			
        -: 1179:      //trash card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1180-block  0
call    0 never executed
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1188-block  0
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
    $$$$$: 1195-block  0
branch  0 never executed
branch  1 never executed
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1198-block  0
call    0 never executed
call    1 never executed
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1204-block  0
call    0 never executed
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1208-block  0
    $$$$$: 1208-block  1
    $$$$$: 1208-block  2
branch  0 never executed
branch  1 never executed
    #####: 1209:	if (i != currentPlayer){
    $$$$$: 1209-block  0
branch  0 never executed
branch  1 never executed
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1212-block  0
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
    $$$$$: 1215-block  0
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1220-block  0
    $$$$$: 1220-block  1
    $$$$$: 1220-block  2
branch  0 never executed
branch  1 never executed
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1222-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1222-block  1
branch  2 never executed
branch  3 never executed
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
    $$$$$: 1225-block  0
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
    $$$$$: 1228-block  0
branch  0 never executed
branch  1 never executed
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1231-block  0
call    0 never executed
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
    $$$$$: 1235-block  0
branch  0 never executed
branch  1 never executed
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1237-block  0
call    0 never executed
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
    $$$$$: 1241-block  0
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
    $$$$$: 1245-block  0
        -: 1246:    }
        -: 1247:	
    46030: 1248:  return -1;
    $$$$$: 1248-block  0
    46030: 1248-block  1
        -: 1249:}
        -: 1250:
function discardCard called 45590 returned 100% blocks executed 89%
    45590: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    45590: 1251-block  0
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
    45590: 1255:  if (trashFlag < 1)
    45590: 1255-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1256:    {
        -: 1257:      //add card to played pile
    45590: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    45590: 1259:      state->playedCardCount++;
    45590: 1259-block  0
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
    45590: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
    45590: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    45590: 1266-block  0
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
     1252: 1269:      state->handCount[currentPlayer]--;
     1252: 1269-block  0
        -: 1270:    }
    44338: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    44338: 1271-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
    $$$$$: 1274-block  0
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
    44338: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
    44338: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
    44338: 1283:      state->handCount[currentPlayer]--;
    44338: 1283-block  0
        -: 1284:    }
        -: 1285:	
    45590: 1286:  return 0;
    45590: 1286-block  0
        -: 1287:}
        -: 1288:
function gainCard called 19274 returned 100% blocks executed 80%
    19274: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    19274: 1289-block  0
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
    19274: 1294:  if ( supplyCount(supplyPos, state) < 1 )
    19274: 1294-block  0
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
        -: 1295:    {
     7446: 1296:      return -1;
     7446: 1296-block  0
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
    11828: 1304:  if (toFlag == 1)
    11828: 1304-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
    $$$$$: 1307-block  0
        -: 1308:    }
    11828: 1309:  else if (toFlag == 2)
    11828: 1309-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
    $$$$$: 1312-block  0
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
    11828: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    11828: 1317:      state->discardCount[player]++;
    11828: 1317-block  0
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
    11828: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
    11828: 1323:  return 0;
    11828: 1323-block  0
        -: 1324:}
        -: 1325:
function updateCoins called 46030 returned 100% blocks executed 82%
    46030: 1326:int updateCoins(int player, struct gameState *state, int bonus)
    46030: 1326-block  0
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
    46030: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
   276180: 1334:  for (i = 0; i < state->handCount[player]; i++)
    46030: 1334-block  0
   230150: 1334-block  1
   276180: 1334-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1335:    {
   230150: 1336:      if (state->hand[player][i] == copper)
   230150: 1336-block  0
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1337:	{
   178934: 1338:	  state->coins += 1;
   178934: 1338-block  0
        -: 1339:	}
    51216: 1340:      else if (state->hand[player][i] == silver)
    51216: 1340-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
    $$$$$: 1342-block  0
        -: 1343:	}
    51216: 1344:      else if (state->hand[player][i] == gold)
    51216: 1344-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
    $$$$$: 1346-block  0
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
    46030: 1351:  state->coins += bonus;
        -: 1352:
    46030: 1353:  return 0;
    46030: 1353-block  0
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of dominion.c
        -: 1358:
